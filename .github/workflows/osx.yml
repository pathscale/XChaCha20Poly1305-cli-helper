name: osx

on:
  workflow_dispatch:
  push:
    branches:
      - osx-build

env:
  CARGO_TERM_COLOR: always
  RUST_TOOLCHAIN: 1.77.1
  CARGO_PROFILE: release

permissions:
  contents: write

jobs:

  proceed_release:
    name: Create new release for these changes?
    runs-on: ubuntu-latest
    outputs:
      PROCEED_WITH_RELEASE: ${{ steps.decision.outputs.PROCEED_WITH_RELEASE }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Get the version
        id: get_version
        run: echo "VERSION=$(grep "^version" Cargo.toml | awk '{print $3}' | tr -d '"')" >> $GITHUB_ENV

      - name: Get latest release
        id: get_latest_release
        run: echo "LATEST_RELEASE=0.1" >> $GITHUB_ENV        

      - id: decision
        name: Compare versions and skip release if equal
        run: |
          echo "Version: '${{ env.VERSION }}' | latest release: '${{ env.LATEST_RELEASE }}'"
          if [ "${{ env.VERSION }}" = "${{ env.LATEST_RELEASE }}" ]; then
            echo "PROCEED_WITH_RELEASE=true" >> $GITHUB_OUTPUT
            echo "Latest release version matches current version. Skipping building & release steps."            
          else
            echo "PROCEED_WITH_RELEASE=true" >> $GITHUB_OUTPUT
            echo "Proceeding with building & release steps."          
          fi
          

  build-macos:
    name: Build macOS binary
    needs: [proceed_release]
    if: needs.proceed_release.outputs.PROCEED_WITH_RELEASE == 'true'
    strategy:
      matrix:
        # The file format is chacha_poly_cli-<os>-<arch>
        include:
          - arch: aarch64-apple-darwin
            os: macos-latest
            file: chacha_poly_cli-darwin-arm64
            continue-on-error: false
          - arch: x86_64-apple-darwin
            os: macos-latest
            file: chacha_poly_cli-darwin-amd64
            continue-on-error: false
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.continue-on-error }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v3
    
      - name: Get the version
        id: get_version
        run: echo "VERSION=$(grep "^version" Cargo.toml | awk '{print $3}' | tr -d '"')" >> $GITHUB_ENV

      - name: Cache cargo assets
        id: cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ matrix.arch }}-build-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_TOOLCHAIN }}
          targets: ${{ matrix.arch }}
      - name: Install latest nextest release
        uses: taiki-e/install-action@nextest
      - name: Output package versions
        run: cargo version ; rustc --version ; gcc --version ; g++ --version

      - name: Run cargo build
        run: cargo build --profile ${{ env.CARGO_PROFILE }} --target ${{ matrix.arch }}

      - name: Calculate checksum and rename binary
        shell: bash
        run: |
          cd target/${{ matrix.arch }}/${{ env.CARGO_PROFILE }}          
          chmod +x chacha_poly_cli
          escaped_version=$(echo ${{ env.VERSION }} | sed 's/\./_/g')          
          mv chacha_poly_cli chacha_poly_cli_v$escaped_version
          tar -zcvf ${{ matrix.file }}_${{ env.VERSION }}.tgz chacha_poly_cli_v$escaped_version
          echo $(shasum -a 256 ${{ matrix.file }}_${{ env.VERSION }}.tgz | cut -f1 -d' ') > ${{ matrix.file }}_${{ env.VERSION }}.sha256sum

      - name: List files
        run: | 
          find target/*/release/*.tgz

      - name: Upload to bunny
        env: 
            STORAGE_API_KEY: ${{ secrets.BUNNYCDN_STORAGE_API_KEY }}
            ZONE_API_KEY: ${{ secrets.BUNNYCDN_ZONE_API_KEY }}
            ZONE_ID: ${{ secrets.BUNNYCDN_DEV_ZONE_ID }}
            STORAGE_NAME: ${{ secrets.BUNNYCDN_STORAGE_NAME }}
        shell: bash
        run: |
          curl -s --request PUT --header "AccessKey: $STORAGE_API_KEY" -T ./target/${{ matrix.arch }}/${{ env.CARGO_PROFILE }}/${{ matrix.file }}_${{ env.VERSION }}.tgz "https://storage.bunnycdn.com/$STORAGE_NAME/"
          curl -s --request POST --header "AccessKey: $ZONE_API_KEY" --header "Content-Type: application/json" --header "Accept: application/json" "https://bunnycdn.com/api/pullzone/$ZONE_ID/purgeCache" --data "{"id":"$ZONE_ID"}"
